#!/usr/bin/env node

'use strict';

const colors = require('colors');
const fs = require('fs');
const os = require('os');
const regexpTree = require('..');

const options = require('nomnom')
  .script('regexp-tree')
  .options({
    expression: {
      abbr: 'e',
      help: 'A regular expression to be parsed',
      type: 'string',
      required: true,
    },
    loc: {
      abbr: 'l',
      help: 'Whether to capture AST node locations',
      flag: true,
    },
    optimize: {
      abbr: 'o',
      help: 'Apply optimizer on the passed expression',
      flag: true,
    },
    compat: {
      abbr: 'c',
      help: 'Apply compat-transpiler on the passed expression',
      flag: true,
    },
    table: {
      abbr: 't',
      help: 'Print NFA/DFA transition tables (nfa/dfa/all)',
      callback(table) {
        const ALLOWED = ['nfa', 'dfa', 'all'];
        if (!ALLOWED.includes(table)) {
          return colors.red(
            `\nUnknown table option: "${table}". ` +
            `Available options are: ${ALLOWED.join('/')}.\n`
          );
        }
      }
    },
  })
  .parse();

function shouldStripQuotes(expression) {
  return os.platform() === 'win32' && (
    (expression[0] === "'" && expression[expression.length - 1] === "'") ||
    (expression[0] === '"' && expression[expression.length - 1] === '"')
  );
}

function normalize(expression) {
  if (!shouldStripQuotes(expression)) {
    return expression;
  }

  // For Windows strip ' at the beginning and end.
  return expression.slice(1, -1);
}

function main() {
  const {
    compat,
    loc,
    optimize,
    table,
  } = options;

  const expression = normalize(options.expression);

  // ------------------------------------------------------
  // Optimizer.

  if (optimize) {
    const optimized = regexpTree.optimize(expression);
    console.info('\n', bold('Optimized:'), optimized.toString(), '\n');
    return;
  }

  // ------------------------------------------------------
  // Compat-transpiler.

  if (compat) {
    const compatTranspiled = regexpTree.compatTranspile(expression);
    console.info('\n', bold('Compat:'), compatTranspiled.toString(), '\n');
    return;
  }

  // ------------------------------------------------------
  // Transition table.
  if (table) {
    const {fa} = regexpTree;

    const shouldPrintNFA = (table === 'nfa' || table === 'all');
    const shouldPrintDFA = (table === 'dfa' || table === 'all');

    console.info(`\n${colors.bold(colors.yellow('>'))} - starting`);
    console.info(`${colors.bold(colors.green('âœ“'))} - accepting`);

    if (shouldPrintNFA) {
      fa.toNFA(expression).printTransitionTable();
    }

    if (shouldPrintDFA) {
      const dfa = fa.toDFA(expression);
      dfa.printTransitionTable('\nDFA: Original transition table:\n');

      dfa.minimize();
      dfa.printTransitionTable('\nDFA: Minimized transition table:\n');
    }

    return;
  }

  // ------------------------------------------------------
  // Parsing.

  const parseOptions = {
    captureLocations: loc,
  };

  const parsed = regexpTree.parse(expression, parseOptions);

  console.info(JSON.stringify(parsed, null, 2));

}

function bold(text) {
  return `\x1b[1m${text}\x1b[0m`;
}

if (require.main === module) {
  main();
}
